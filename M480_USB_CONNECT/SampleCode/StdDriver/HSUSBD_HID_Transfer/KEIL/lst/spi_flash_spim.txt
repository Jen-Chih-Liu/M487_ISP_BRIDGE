; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\spi_flash_spim.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi_flash_spim.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Device\Nuvoton\M480\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DDEBUG_ENABLE_SEMIHOST --omf_browse=.\obj\spi_flash_spim.crf ..\SPI_FLASH_SPIM.C]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  initial_spi PROC
;;;12     uint8_t  g_buff[BUFFER_SIZE] __attribute__((aligned(4)));
;;;13     void initial_spi(void)
000000  b508              PUSH     {r3,lr}
;;;14     {
;;;15     	uint32_t     offset,i;
;;;16     	uint32_t    *pData;
;;;17     
;;;18         uint8_t     idBuf[3];
;;;19     	/* Enable SPIM module clock */
;;;20         CLK_EnableModuleClock(SPIM_MODULE);
000002  200e              MOVS     r0,#0xe
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;21     	
;;;22     	
;;;23         /* Init SPIM multi-function pins, MOSI(PC.0), MISO(PC.1), CLK(PC.2), SS(PC.3), D3(PC.4), and D2(PC.5) */
;;;24         SYS->GPC_MFPL &= ~(SYS_GPC_MFPL_PC0MFP_Msk | SYS_GPC_MFPL_PC1MFP_Msk | SYS_GPC_MFPL_PC2MFP_Msk |
000008  f04f4080          MOV      r0,#0x40000000
00000c  6c00              LDR      r0,[r0,#0x40]
00000e  f000407f          AND      r0,r0,#0xff000000
000012  f04f4180          MOV      r1,#0x40000000
000016  6408              STR      r0,[r1,#0x40]
;;;25                            SYS_GPC_MFPL_PC3MFP_Msk | SYS_GPC_MFPL_PC4MFP_Msk | SYS_GPC_MFPL_PC5MFP_Msk);
;;;26         SYS->GPC_MFPL |= SYS_GPC_MFPL_PC0MFP_SPIM_MOSI | SYS_GPC_MFPL_PC1MFP_SPIM_MISO |
000018  4608              MOV      r0,r1
00001a  6c00              LDR      r0,[r0,#0x40]
00001c  4937              LDR      r1,|L1.252|
00001e  4308              ORRS     r0,r0,r1
000020  f04f4180          MOV      r1,#0x40000000
000024  6408              STR      r0,[r1,#0x40]
;;;27                          SYS_GPC_MFPL_PC2MFP_SPIM_CLK | SYS_GPC_MFPL_PC3MFP_SPIM_SS |
;;;28                          SYS_GPC_MFPL_PC4MFP_SPIM_D3 | SYS_GPC_MFPL_PC5MFP_SPIM_D2;
;;;29         PC->SMTEN |= GPIO_SMTEN_SMTEN2_Msk;
000026  4836              LDR      r0,|L1.256|
000028  6800              LDR      r0,[r0,#0]
00002a  f0400004          ORR      r0,r0,#4
00002e  f04f2140          MOV      r1,#0x40004000
000032  f8c100a4          STR      r0,[r1,#0xa4]
;;;30     
;;;31         /* Set SPIM I/O pins as high slew rate up to 80 MHz. */
;;;32         PC->SLEWCTL = (PC->SLEWCTL & 0xFFFFF000) |
000036  4832              LDR      r0,|L1.256|
000038  1d00              ADDS     r0,r0,#4
00003a  6800              LDR      r0,[r0,#0]
00003c  f36f000b          BFC      r0,#0,#12
000040  1c40              ADDS     r0,r0,#1
000042  f44070aa          ORR      r0,r0,#0x154
000046  f4406080          ORR      r0,r0,#0x400
00004a  f8c100a8          STR      r0,[r1,#0xa8]
;;;33                       (0x1<<GPIO_SLEWCTL_HSREN0_Pos) | (0x1<<GPIO_SLEWCTL_HSREN1_Pos) |
;;;34                       (0x1<<GPIO_SLEWCTL_HSREN2_Pos) | (0x1<<GPIO_SLEWCTL_HSREN3_Pos) |
;;;35                       (0x1<<GPIO_SLEWCTL_HSREN4_Pos) | (0x1<<GPIO_SLEWCTL_HSREN5_Pos);
;;;36     
;;;37     
;;;38         printf("+-------------------------------------------+\n");
00004e  a02d              ADR      r0,|L1.260|
000050  f7fffffe          BL       __2printf
;;;39         printf("|    M480 SPIM I/O mode read/write sample   |\n");
000054  a037              ADR      r0,|L1.308|
000056  f7fffffe          BL       __2printf
;;;40         printf("+-------------------------------------------+\n");
00005a  a02a              ADR      r0,|L1.260|
00005c  f7fffffe          BL       __2printf
;;;41     
;;;42         SYS_UnlockReg();                   /* Unlock register lock protect */
000060  bf00              NOP      
000062  bf00              NOP      
000064  bf00              NOP      
                  |L1.102|
000066  2059              MOVS     r0,#0x59
000068  493e              LDR      r1,|L1.356|
00006a  6008              STR      r0,[r1,#0]
00006c  2016              MOVS     r0,#0x16
00006e  0589              LSLS     r1,r1,#22
000070  f8c10100          STR      r0,[r1,#0x100]
000074  2088              MOVS     r0,#0x88
000076  f8c10100          STR      r0,[r1,#0x100]
00007a  06c0              LSLS     r0,r0,#27
00007c  f8d00100          LDR      r0,[r0,#0x100]
000080  2800              CMP      r0,#0
000082  d0f0              BEQ      |L1.102|
000084  bf00              NOP      
;;;43     
;;;44         SPIM_SET_CLOCK_DIVIDER(2);        /* Set SPIM clock as HCLK divided by 3 */
000086  bf00              NOP      
000088  4837              LDR      r0,|L1.360|
00008a  6840              LDR      r0,[r0,#4]
00008c  b280              UXTH     r0,r0
00008e  f4403000          ORR      r0,r0,#0x20000
000092  4935              LDR      r1,|L1.360|
000094  6048              STR      r0,[r1,#4]
000096  bf00              NOP      
;;;45     
;;;46         SPIM_SET_RXCLKDLY_RDDLYSEL(0);    /* Insert 0 delay cycle. Adjust the sampling clock of received data to latch the correct data. */
000098  bf00              NOP      
00009a  4608              MOV      r0,r1
00009c  68c0              LDR      r0,[r0,#0xc]
00009e  f42020e0          BIC      r0,r0,#0x70000
0000a2  60c8              STR      r0,[r1,#0xc]
0000a4  bf00              NOP      
;;;47         SPIM_SET_RXCLKDLY_RDEDGE();       /* Use SPI input clock rising edge to sample received data. */
0000a6  4608              MOV      r0,r1
0000a8  68c0              LDR      r0,[r0,#0xc]
0000aa  f4401080          ORR      r0,r0,#0x100000
0000ae  60c8              STR      r0,[r1,#0xc]
;;;48     
;;;49         SPIM_SET_DCNUM(8);                /* Set 8 dummy cycle. */
0000b0  bf00              NOP      
0000b2  4608              MOV      r0,r1
0000b4  6c80              LDR      r0,[r0,#0x48]
0000b6  f02050f8          BIC      r0,r0,#0x1f000000
0000ba  f0406000          ORR      r0,r0,#0x8000000
0000be  f4403080          ORR      r0,r0,#0x10000
0000c2  6488              STR      r0,[r1,#0x48]
0000c4  bf00              NOP      
;;;50     
;;;51         if (SPIM_InitFlash(1) != 0)        /* Initialized SPI flash */
0000c6  2001              MOVS     r0,#1
0000c8  f7fffffe          BL       SPIM_InitFlash
0000cc  b110              CBZ      r0,|L1.212|
;;;52         {
;;;53             printf("SPIM flash initialize failed!\n");
0000ce  a027              ADR      r0,|L1.364|
0000d0  f7fffffe          BL       __2printf
                  |L1.212|
;;;54         }
;;;55     
;;;56         SPIM_ReadJedecId(idBuf, sizeof (idBuf), 1);
0000d4  2201              MOVS     r2,#1
0000d6  2103              MOVS     r1,#3
0000d8  4668              MOV      r0,sp
0000da  f7fffffe          BL       SPIM_ReadJedecId
;;;57         printf("SPIM get JEDEC ID=0x%02X, 0x%02X, 0x%02X\n", idBuf[0], idBuf[1], idBuf[2]);
0000de  f89d3002          LDRB     r3,[sp,#2]
0000e2  f89d2001          LDRB     r2,[sp,#1]
0000e6  f89d1000          LDRB     r1,[sp,#0]
0000ea  a028              ADR      r0,|L1.396|
0000ec  f7fffffe          BL       __2printf
;;;58     
;;;59         SPIM_Enable_4Bytes_Mode(USE_4_BYTES_MODE, 1);
0000f0  2101              MOVS     r1,#1
0000f2  2000              MOVS     r0,#0
0000f4  f7fffffe          BL       SPIM_Enable_4Bytes_Mode
;;;60     		#if 0
;;;61     		   /*
;;;62          *  Erase flash page
;;;63          */
;;;64         printf("Erase SPI flash block 0x%x...", TEST_BLOCK_ADDR);
;;;65         SPIM_EraseBlock(TEST_BLOCK_ADDR, USE_4_BYTES_MODE, OPCODE_BE_64K, 1, 1);
;;;66         printf("done.\n");
;;;67     
;;;68         /*
;;;69          *  Verify flash page be erased
;;;70          */
;;;71         printf("Verify SPI flash block 0x%x be erased...", TEST_BLOCK_ADDR);
;;;72     
;;;73             memset(g_buff, 0, BUFFER_SIZE);
;;;74             SPIM_IO_Read(0, USE_4_BYTES_MODE, BUFFER_SIZE, g_buff, OPCODE_FAST_READ, 1, 1, 1, 1);
;;;75     
;;;76             pData = (uint32_t *)g_buff;
;;;77             for (i = 0; i < BUFFER_SIZE; i += 4, pData++)
;;;78             {
;;;79                 if (*pData != 0xFFFFFFFF)
;;;80                 {
;;;81                     printf("FAILED!\n");
;;;82                     printf("Flash address 0x%x, read 0x%x!\n", TEST_BLOCK_ADDR+i, *pData);
;;;83                     while(1);
;;;84                 }
;;;85             }
;;;86         
;;;87         printf("done.\n");
;;;88     
;;;89         /*
;;;90          *  Program data to flash block
;;;91          */
;;;92         printf("Program sequential data to flash block 0x%x...", TEST_BLOCK_ADDR);
;;;93         
;;;94             //pData = (uint32_t *)g_buff;
;;;95             for (i = 0; i < BUFFER_SIZE; i ++)
;;;96                 g_buff[i] = i&0xff;
;;;97     
;;;98             SPIM_IO_Write(0, USE_4_BYTES_MODE, BUFFER_SIZE, g_buff, OPCODE_PP, 1, 1, 1);
;;;99         
;;;100        printf("done.\n");
;;;101    
;;;102        /*
;;;103         *  Read and compare flash data
;;;104         */
;;;105        printf("Verify SPI flash block 0x%x data with Fast Read command...", TEST_BLOCK_ADDR);
;;;106    offset=0;
;;;107            memset(g_buff, 0, BUFFER_SIZE);
;;;108            SPIM_IO_Read(0, USE_4_BYTES_MODE, BUFFER_SIZE, g_buff, OPCODE_FAST_READ, 1, 1, 1, 1);
;;;109    
;;;110    
;;;111           
;;;112    
;;;113        
;;;114        printf("done.\n");
;;;115    
;;;116    
;;;117        
;;;118            
;;;119    
;;;120        
;;;121       
;;;122    
;;;123    		
;;;124    		#endif
;;;125    }
0000f8  bd08              POP      {r3,pc}
;;;126    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L1.252|
                          DCD      0x00333333
                  |L1.256|
                          DCD      0x400040a4
                  |L1.260|
000104  2b2d2d2d          DCB      "+-------------------------------------------+\n",0
000108  2d2d2d2d
00010c  2d2d2d2d
000110  2d2d2d2d
000114  2d2d2d2d
000118  2d2d2d2d
00011c  2d2d2d2d
000120  2d2d2d2d
000124  2d2d2d2d
000128  2d2d2d2d
00012c  2d2d2d2d
000130  2b0a00  
000133  00                DCB      0
                  |L1.308|
000134  7c202020          DCB      "|    M480 SPIM I/O mode read/write sample   |\n",0
000138  204d3438
00013c  30205350
000140  494d2049
000144  2f4f206d
000148  6f646520
00014c  72656164
000150  2f777269
000154  74652073
000158  616d706c
00015c  65202020
000160  7c0a00  
000163  00                DCB      0
                  |L1.356|
                          DCD      0x40000100
                  |L1.360|
                          DCD      0x40007000
                  |L1.364|
00016c  5350494d          DCB      "SPIM flash initialize failed!\n",0
000170  20666c61
000174  73682069
000178  6e697469
00017c  616c697a
000180  65206661
000184  696c6564
000188  210a00  
00018b  00                DCB      0
                  |L1.396|
00018c  5350494d          DCB      "SPIM get JEDEC ID=0x%02X, 0x%02X, 0x%02X\n",0
000190  20676574
000194  204a4544
000198  45432049
00019c  443d3078
0001a0  25303258
0001a4  2c203078
0001a8  25303258
0001ac  2c203078
0001b0  25303258
0001b4  0a00    
0001b6  00                DCB      0
0001b7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_buff
                          %        512

;*** Start embedded assembler ***

#line 1 "..\\SPI_FLASH_SPIM.C"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_SPI_FLASH_SPIM_C_0826a375____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_SPI_FLASH_SPIM_C_0826a375____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_SPI_FLASH_SPIM_C_0826a375____REVSH|
#line 402
|__asm___16_SPI_FLASH_SPIM_C_0826a375____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_SPI_FLASH_SPIM_C_0826a375____RRX|
#line 587
|__asm___16_SPI_FLASH_SPIM_C_0826a375____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
