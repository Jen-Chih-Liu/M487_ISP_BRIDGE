; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\main_offline.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main_offline.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Device\Nuvoton\M480\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DDEBUG_ENABLE_SEMIHOST --omf_browse=.\obj\main_offline.crf ..\main_offline.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  SYS_Init PROC
;;;20     
;;;21     void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     
;;;24         /* Set XT1_OUT(PF.2) and XT1_IN(PF.3) to input mode */
;;;25         PF->MODE &= ~(GPIO_MODE_MODE2_Msk | GPIO_MODE_MODE3_Msk);
000002  4882              LDR      r0,|L1.524|
000004  6800              LDR      r0,[r0,#0]
000006  f02000f0          BIC      r0,r0,#0xf0
00000a  f04f2140          MOV      r1,#0x40004000
00000e  f8c10140          STR      r0,[r1,#0x140]
;;;26     
;;;27         /* Enable HXT clock (external XTAL 12MHz) */
;;;28         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       CLK_EnableXtalRC
;;;29     
;;;30         /* Wait for HXT clock ready */
;;;31         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       CLK_WaitClockReady
;;;32     
;;;33         /* Set core clock as PLL_CLOCK from PLL */
;;;34         CLK_SetCoreClock(192000000);
00001e  487c              LDR      r0,|L1.528|
000020  f7fffffe          BL       CLK_SetCoreClock
;;;35         CLK->PCLKDIV = (CLK_PCLKDIV_PCLK0DIV2 | CLK_PCLKDIV_PCLK1DIV2); // PCLK divider set 2  
000024  2011              MOVS     r0,#0x11
000026  497b              LDR      r1,|L1.532|
000028  6008              STR      r0,[r1,#0]
;;;36     }
00002a  bd10              POP      {r4,pc}
;;;37     
                          ENDP

                  check_error PROC
;;;39     #if 1
;;;40     void check_error(char d, char *l,ErrNo ret_in)
00002c  b570              PUSH     {r4-r6,lr}
;;;41     {
00002e  4605              MOV      r5,r0
000030  460e              MOV      r6,r1
000032  4614              MOV      r4,r2
;;;42     if(ret_in)
000034  b16c              CBZ      r4,|L1.82|
;;;43     {
;;;44     printf("%d\n\r",d);
000036  4629              MOV      r1,r5
000038  a077              ADR      r0,|L1.536|
00003a  f7fffffe          BL       __2printf
;;;45     printf("%s\n\r",l);
00003e  4631              MOV      r1,r6
000040  a077              ADR      r0,|L1.544|
000042  f7fffffe          BL       __2printf
;;;46     printf("this is error code %d\n\r",ret_in);
000046  4621              MOV      r1,r4
000048  a077              ADR      r0,|L1.552|
00004a  f7fffffe          BL       __2printf
;;;47     while(1);
00004e  bf00              NOP      
                  |L1.80|
000050  e7fe              B        |L1.80|
                  |L1.82|
;;;48     }
;;;49     }
000052  bd70              POP      {r4-r6,pc}
;;;50     #else
                          ENDP

                  TMR1_IRQHandler PROC
;;;56     volatile uint32_t g_au32TMRINTCount;
;;;57     void TMR1_IRQHandler(void)
000054  bf00              NOP      
000056  487a              LDR      r0,|L1.576|
000058  6880              LDR      r0,[r0,#8]
00005a  f0000001          AND      r0,r0,#1
;;;58     {
;;;59         if(TIMER_GetIntFlag(TIMER1) == 1)
00005e  b148              CBZ      r0,|L1.116|
;;;60         {
;;;61             /* Clear Timer0 time-out interrupt flag */
;;;62             TIMER_ClearIntFlag(TIMER1);
000060  bf00              NOP      
000062  2001              MOVS     r0,#1
000064  4976              LDR      r1,|L1.576|
000066  6088              STR      r0,[r1,#8]
000068  bf00              NOP      
;;;63     
;;;64             g_au32TMRINTCount++;
00006a  4876              LDR      r0,|L1.580|
00006c  6800              LDR      r0,[r0,#0]  ; g_au32TMRINTCount
00006e  1c40              ADDS     r0,r0,#1
000070  4974              LDR      r1,|L1.580|
000072  6008              STR      r0,[r1,#0]  ; g_au32TMRINTCount
                  |L1.116|
;;;65         }
;;;66     }
000074  4770              BX       lr
;;;67     void timer_1_init(void)
                          ENDP

                  timer_1_init PROC
000076  b510              PUSH     {r4,lr}
;;;68     {
;;;69         CLK_EnableModuleClock(TMR1_MODULE);
000078  4873              LDR      r0,|L1.584|
00007a  f7fffffe          BL       CLK_EnableModuleClock
;;;70     
;;;71         CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR0SEL_HXT, 0);
00007e  2200              MOVS     r2,#0
000080  4611              MOV      r1,r2
000082  4871              LDR      r0,|L1.584|
000084  f7fffffe          BL       CLK_SetModuleClock
;;;72     	
;;;73     	/* Open Timer1 in periodic mode, enable interrupt and 2 interrupt ticks per second */
;;;74         TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 2);
000088  2202              MOVS     r2,#2
00008a  0691              LSLS     r1,r2,#26
00008c  486c              LDR      r0,|L1.576|
00008e  f7fffffe          BL       TIMER_Open
;;;75         TIMER_EnableInt(TIMER1);
000092  bf00              NOP      
000094  486a              LDR      r0,|L1.576|
000096  6800              LDR      r0,[r0,#0]
000098  f0405000          ORR      r0,r0,#0x20000000
00009c  4968              LDR      r1,|L1.576|
00009e  6008              STR      r0,[r1,#0]
0000a0  bf00              NOP      
;;;76     	  NVIC_EnableIRQ(TMR1_IRQn);
0000a2  2021              MOVS     r0,#0x21
0000a4  f000021f          AND      r2,r0,#0x1f
0000a8  2101              MOVS     r1,#1
0000aa  4091              LSLS     r1,r1,r2
0000ac  0942              LSRS     r2,r0,#5
0000ae  0092              LSLS     r2,r2,#2
0000b0  f10222e0          ADD      r2,r2,#0xe000e000
0000b4  f8c21100          STR      r1,[r2,#0x100]
0000b8  bf00              NOP      
;;;77     		 TIMER_Start(TIMER1);
0000ba  bf00              NOP      
0000bc  4860              LDR      r0,|L1.576|
0000be  6800              LDR      r0,[r0,#0]
0000c0  f0404080          ORR      r0,r0,#0x40000000
0000c4  495e              LDR      r1,|L1.576|
0000c6  6008              STR      r0,[r1,#0]
0000c8  bf00              NOP      
;;;78     }
0000ca  bd10              POP      {r4,pc}
;;;79         
                          ENDP

                  main PROC
;;;82     uint32_t devid, config[2];
;;;83     int32_t main(void)
0000cc  ed2d8b02          VPUSH    {d8}
;;;84     {
;;;85     	 ErrNo ret;
;;;86         /* Unlock protected registers */
;;;87         SYS_UnlockReg();
0000d0  bf00              NOP      
0000d2  bf00              NOP      
0000d4  bf00              NOP      
                  |L1.214|
0000d6  2059              MOVS     r0,#0x59
0000d8  495c              LDR      r1,|L1.588|
0000da  6008              STR      r0,[r1,#0]
0000dc  2016              MOVS     r0,#0x16
0000de  0589              LSLS     r1,r1,#22
0000e0  f8c10100          STR      r0,[r1,#0x100]
0000e4  2088              MOVS     r0,#0x88
0000e6  f8c10100          STR      r0,[r1,#0x100]
0000ea  06c0              LSLS     r0,r0,#27
0000ec  f8d00100          LDR      r0,[r0,#0x100]
0000f0  2800              CMP      r0,#0
0000f2  d0f0              BEQ      |L1.214|
0000f4  bf00              NOP      
;;;88     
;;;89         /* Init System, peripheral clock and multi-function I/O */
;;;90         SYS_Init();
0000f6  f7fffffe          BL       SYS_Init
;;;91        GPIO_SetMode(PB, BIT5, GPIO_MODE_OUTPUT);
0000fa  2201              MOVS     r2,#1
0000fc  2120              MOVS     r1,#0x20
0000fe  4854              LDR      r0,|L1.592|
000100  f7fffffe          BL       GPIO_SetMode
;;;92     
;;;93     	//ret=io_open(UART_NAME_STRING, &DEV_handle);
;;;94     	//ret=io_open(I2C_NAME_STRING, &DEV_handle);
;;;95     	//ret=io_open(SPI_NAME_STRING, &DEV_handle);
;;;96     	//ret=io_open(RS485_NAME_STRING, &DEV_handle);
;;;97     	ret=io_open(CAN_NAME_STRING, &DEV_handle);
000104  4953              LDR      r1,|L1.596|
000106  a054              ADR      r0,|L1.600|
000108  f7fffffe          BL       io_open
00010c  4604              MOV      r4,r0
;;;98     	initial_spi();//for SPIM initial
00010e  f7fffffe          BL       initial_spi
;;;99     	// devtab_entry_t *t = (devtab_entry_t *)DEV_handle;
;;;100    	//printf("interface type:%s\n\r",t->name);
;;;101    	 check_error(__LINE__, __FILE__, ret);
000112  4622              MOV      r2,r4
000114  a152              ADR      r1,|L1.608|
000116  2065              MOVS     r0,#0x65
000118  f7fffffe          BL       check_error
;;;102    	 init_ISP_command();
00011c  f7fffffe          BL       init_ISP_command
;;;103    	 printf("this is test start\n\r");
000120  a054              ADR      r0,|L1.628|
000122  f7fffffe          BL       __2printf
;;;104    //timer_1_init();
;;;105      // Auto_Detect_Connect(&ISP_COMMAND);
;;;106    	// ret=SyncPackno(&ISP_COMMAND);	 
;;;107    	// check_error(__LINE__, __FILE__, ret);
;;;108    
;;;109    
;;;110    	ret=FWVersion(&ISP_COMMAND,&fwversion);
000126  4959              LDR      r1,|L1.652|
000128  4859              LDR      r0,|L1.656|
00012a  f7fffffe          BL       FWVersion
00012e  4604              MOV      r4,r0
;;;111    	check_error(__LINE__, __FILE__, ret);
000130  4622              MOV      r2,r4
000132  a14b              ADR      r1,|L1.608|
000134  206f              MOVS     r0,#0x6f
000136  f7fffffe          BL       check_error
;;;112    	printf("fw version:0x%x\n\r",fwversion);
00013a  4854              LDR      r0,|L1.652|
00013c  6801              LDR      r1,[r0,#0]  ; fwversion
00013e  a055              ADR      r0,|L1.660|
000140  f7fffffe          BL       __2printf
;;;113    	ret=GetDeviceID(&ISP_COMMAND,&devid);
000144  4958              LDR      r1,|L1.680|
000146  4852              LDR      r0,|L1.656|
000148  f7fffffe          BL       GetDeviceID
00014c  4604              MOV      r4,r0
;;;114    	check_error(__LINE__, __FILE__, ret);
00014e  4622              MOV      r2,r4
000150  a143              ADR      r1,|L1.608|
000152  2072              MOVS     r0,#0x72
000154  f7fffffe          BL       check_error
;;;115    	printf("device id:0x%x\n\r",devid);
000158  4853              LDR      r0,|L1.680|
00015a  6801              LDR      r1,[r0,#0]  ; devid
00015c  a053              ADR      r0,|L1.684|
00015e  f7fffffe          BL       __2printf
;;;116    	ret=GetConfig(&ISP_COMMAND,config);
000162  4957              LDR      r1,|L1.704|
000164  484a              LDR      r0,|L1.656|
000166  f7fffffe          BL       GetConfig
00016a  4604              MOV      r4,r0
;;;117    	check_error(__LINE__, __FILE__, ret);
00016c  4622              MOV      r2,r4
00016e  a13c              ADR      r1,|L1.608|
000170  2075              MOVS     r0,#0x75
000172  f7fffffe          BL       check_error
;;;118    	printf("config0: 0x%x\n\r", config[0]);
000176  4852              LDR      r0,|L1.704|
000178  6801              LDR      r1,[r0,#0]  ; config
00017a  a052              ADR      r0,|L1.708|
00017c  f7fffffe          BL       __2printf
;;;119    	printf("config1: 0x%x\n\r", config[1]);
000180  484f              LDR      r0,|L1.704|
000182  6841              LDR      r1,[r0,#4]  ; config
000184  a053              ADR      r0,|L1.724|
000186  f7fffffe          BL       __2printf
;;;120    	ret=GetFlashMode(&ISP_COMMAND,&flash_boot);
00018a  4956              LDR      r1,|L1.740|
00018c  4840              LDR      r0,|L1.656|
00018e  f7fffffe          BL       GetFlashMode
000192  4604              MOV      r4,r0
;;;121    	check_error(__LINE__, __FILE__, ret);
000194  4622              MOV      r2,r4
000196  a132              ADR      r1,|L1.608|
000198  2079              MOVS     r0,#0x79
00019a  f7fffffe          BL       check_error
;;;122    	printf("device id:0x%x\n\r",devid);
00019e  4842              LDR      r0,|L1.680|
0001a0  6801              LDR      r1,[r0,#0]  ; devid
0001a2  a042              ADR      r0,|L1.684|
0001a4  f7fffffe          BL       __2printf
;;;123    	if (flash_boot != LDROM_MODE)
0001a8  484e              LDR      r0,|L1.740|
0001aa  6800              LDR      r0,[r0,#0]  ; flash_boot
0001ac  2802              CMP      r0,#2
0001ae  d003              BEQ      |L1.440|
;;;124    	{
;;;125    		printf("boot in APROM\n\r");
0001b0  a04d              ADR      r0,|L1.744|
0001b2  f7fffffe          BL       __2printf
0001b6  e002              B        |L1.446|
                  |L1.440|
;;;126    	}
;;;127    	else
;;;128    	{
;;;129    		printf("boot in LDROM\n\r");
0001b8  a04f              ADR      r0,|L1.760|
0001ba  f7fffffe          BL       __2printf
                  |L1.446|
;;;130    	}
;;;131    	
;;;132    	ret=Updated_Target_Flash(&ISP_COMMAND,0,512);
0001be  f44f7200          MOV      r2,#0x200
0001c2  2100              MOVS     r1,#0
0001c4  4832              LDR      r0,|L1.656|
0001c6  f7fffffe          BL       Updated_Target_Flash
0001ca  4604              MOV      r4,r0
;;;133    	check_error(__LINE__, __FILE__, ret);
0001cc  4622              MOV      r2,r4
0001ce  a124              ADR      r1,|L1.608|
0001d0  2085              MOVS     r0,#0x85
0001d2  f7fffffe          BL       check_error
;;;134    	
;;;135    	//RunAPROM(&ISP_COMMAND);//software rest to aprom
;;;136    	printf("time spend: %f\n\r",(float)g_au32TMRINTCount*(float)0.5);
0001d6  481b              LDR      r0,|L1.580|
0001d8  6800              LDR      r0,[r0,#0]  ; g_au32TMRINTCount
0001da  ee000a10          VMOV     s0,r0
0001de  eeb80a40          VCVT.F32.U32 s0,s0
0001e2  eef60a00          VMOV.F32 s1,#0.50000000
0001e6  ee200a20          VMUL.F32 s0,s0,s1
0001ea  ee101a10          VMOV     r1,s0
0001ee  4608              MOV      r0,r1
0001f0  f7fffffe          BL       __aeabi_f2d
0001f4  ec410b18          VMOV     d8,r0,r1
0001f8  ec532b18          VMOV     r2,r3,d8
0001fc  a042              ADR      r0,|L1.776|
0001fe  f7fffffe          BL       __2printf
;;;137    	
;;;138    	printf("this is stop\n\r");
000202  a046              ADR      r0,|L1.796|
000204  f7fffffe          BL       __2printf
;;;139    	
;;;140      while(1);
000208  bf00              NOP      
                  |L1.522|
00020a  e7fe              B        |L1.522|
;;;141    }
                          ENDP

                  |L1.524|
                          DCD      0x40004140
                  |L1.528|
                          DCD      0x0b71b000
                  |L1.532|
                          DCD      0x40000234
                  |L1.536|
000218  25640a0d          DCB      "%d\n\r",0
00021c  00      
00021d  00                DCB      0
00021e  00                DCB      0
00021f  00                DCB      0
                  |L1.544|
000220  25730a0d          DCB      "%s\n\r",0
000224  00      
000225  00                DCB      0
000226  00                DCB      0
000227  00                DCB      0
                  |L1.552|
000228  74686973          DCB      "this is error code %d\n\r",0
00022c  20697320
000230  6572726f
000234  7220636f
000238  64652025
00023c  640a0d00
                  |L1.576|
                          DCD      0x40050100
                  |L1.580|
                          DCD      g_au32TMRINTCount
                  |L1.584|
                          DCD      0x5ec00003
                  |L1.588|
                          DCD      0x40000100
                  |L1.592|
                          DCD      0x40004040
                  |L1.596|
                          DCD      DEV_handle
                  |L1.600|
000258  43414e30          DCB      "CAN0",0
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
000260  2e2e5c6d          DCB      "..\\main_offline.c",0
000264  61696e5f
000268  6f66666c
00026c  696e652e
000270  6300    
000272  00                DCB      0
000273  00                DCB      0
                  |L1.628|
000274  74686973          DCB      "this is test start\n\r",0
000278  20697320
00027c  74657374
000280  20737461
000284  72740a0d
000288  00      
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
                  |L1.652|
                          DCD      fwversion
                  |L1.656|
                          DCD      ISP_COMMAND
                  |L1.660|
000294  66772076          DCB      "fw version:0x%x\n\r",0
000298  65727369
00029c  6f6e3a30
0002a0  7825780a
0002a4  0d00    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L1.680|
                          DCD      devid
                  |L1.684|
0002ac  64657669          DCB      "device id:0x%x\n\r",0
0002b0  63652069
0002b4  643a3078
0002b8  25780a0d
0002bc  00      
0002bd  00                DCB      0
0002be  00                DCB      0
0002bf  00                DCB      0
                  |L1.704|
                          DCD      config
                  |L1.708|
0002c4  636f6e66          DCB      "config0: 0x%x\n\r",0
0002c8  6967303a
0002cc  20307825
0002d0  780a0d00
                  |L1.724|
0002d4  636f6e66          DCB      "config1: 0x%x\n\r",0
0002d8  6967313a
0002dc  20307825
0002e0  780a0d00
                  |L1.740|
                          DCD      flash_boot
                  |L1.744|
0002e8  626f6f74          DCB      "boot in APROM\n\r",0
0002ec  20696e20
0002f0  4150524f
0002f4  4d0a0d00
                  |L1.760|
0002f8  626f6f74          DCB      "boot in LDROM\n\r",0
0002fc  20696e20
000300  4c44524f
000304  4d0a0d00
                  |L1.776|
000308  74696d65          DCB      "time spend: %f\n\r",0
00030c  20737065
000310  6e643a20
000314  25660a0d
000318  00      
000319  00                DCB      0
00031a  00                DCB      0
00031b  00                DCB      0
                  |L1.796|
00031c  74686973          DCB      "this is stop\n\r",0
000320  20697320
000324  73746f70
000328  0a0d00  
00032b  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  DEV_handle
                          DCD      0x00000000
                  g_au32TMRINTCount
                          DCD      0x00000000
                  fwversion
                          DCD      0x00000000
                  flash_boot
                          DCD      0x00000000
                  devid
                          DCD      0x00000000
                  config
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\main_offline.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_main_offline_c_86486b81____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_main_offline_c_86486b81____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_main_offline_c_86486b81____REVSH|
#line 402
|__asm___14_main_offline_c_86486b81____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_main_offline_c_86486b81____RRX|
#line 587
|__asm___14_main_offline_c_86486b81____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
