<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\NUC230_240_ISP_UART0_PB0_PB1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\NUC230_240_ISP_UART0_PB0_PB1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Mar 12 09:52:21 2019
<BR><P>
<H3>Maximum Stack Usage =        104 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CAN_SendData &rArr; CAN_Transmit &rArr; CAN_SetTxMsg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[24]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ACMP_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1a]">CAN0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1b]">CAN1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[24]">Default_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[21]">I2S_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[20]">PDMA_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1e]">PS2_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[c]">PWMA_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[d]">PWMB_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[22]">PWRWU_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[25]">RTC_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[29]">Reset_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1c]">SC012_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[17]">SPI3_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_nuc230_240.o(i.SystemInit) referenced from startup_nuc230_240.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1d]">USBD_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc230_240.o(.text)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[57]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[58]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[59]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[5a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[5b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[29]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SC012_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetCANBitRate
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RecvData
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[63]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>CAN_BasicReceiveMsg</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, can.o(i.CAN_BasicReceiveMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_BasicReceiveMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[46]"></a>CAN_BasicSendMsg</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, can.o(i.CAN_BasicSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_BasicSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[3e]"></a>CAN_CLR_INT_PENDING_BIT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, can.o(i.CAN_CLR_INT_PENDING_BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_CLR_INT_PENDING_BIT
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
</UL>

<P><STRONG><a name="[3f]"></a>CAN_EnterInitMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(i.CAN_EnterInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[34]"></a>CAN_EnterTestMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can.o(i.CAN_EnterTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Open
</UL>

<P><STRONG><a name="[30]"></a>CAN_GetCANBitRate</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, can.o(i.CAN_GetCANBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_GetCANBitRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[36]"></a>CAN_IsNewDataReceived</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can.o(i.CAN_IsNewDataReceived))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
</UL>

<P><STRONG><a name="[41]"></a>CAN_LeaveInitMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(i.CAN_LeaveInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[32]"></a>CAN_Open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, can.o(i.CAN_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN_Open &rArr; CAN_SetBaudRate &rArr; CAN_GetCANBitRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>CAN_ReadMsgObj</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, can.o(i.CAN_ReadMsgObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_ReadMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsNewDataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[37]"></a>CAN_Receive</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_Receive &rArr; CAN_ReadMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BasicReceiveMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RecvData
</UL>

<P><STRONG><a name="[39]"></a>CAN_RecvData</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, can_transfer.o(i.CAN_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_RecvData &rArr; CAN_Receive &rArr; CAN_ReadMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>CAN_SendData</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, can_transfer.o(i.CAN_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN_SendData &rArr; CAN_Transmit &rArr; CAN_SetTxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CLR_INT_PENDING_BIT
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>CAN_SetBaudRate</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, can.o(i.CAN_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_SetBaudRate &rArr; CAN_GetCANBitRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LeaveInitMode
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetCANBitRate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterInitMode
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Open
</UL>

<P><STRONG><a name="[42]"></a>CAN_SetRxMsg</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, can.o(i.CAN_SetRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN_SetRxMsg &rArr; CAN_SetRxMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsgObj
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>CAN_SetRxMsgObj</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, can.o(i.CAN_SetRxMsgObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_SetRxMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFreeIF
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsg
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>CAN_SetTxMsg</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, can.o(i.CAN_SetTxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_SetTxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFreeIF
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[3d]"></a>CAN_Transmit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_Transmit &rArr; CAN_SetTxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TriggerTxMsg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxMsg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BasicSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
</UL>

<P><STRONG><a name="[47]"></a>CAN_TriggerTxMsg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, can.o(i.CAN_TriggerTxMsg))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[54]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>EraseAP</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, isp_user.o(i.EraseAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EraseAP
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase_User
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[49]"></a>FMC_Erase_User</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fmc_user.o(i.FMC_Erase_User))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAP
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[4b]"></a>FMC_Read_User</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fmc_user.o(i.FMC_Read_User))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConfig
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFlashInfo
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetApromSize
</UL>

<P><STRONG><a name="[52]"></a>FMC_Write_User</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fmc_user.o(i.FMC_Write_User))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>

<P><STRONG><a name="[55]"></a>GPIO_SetMode</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>GetApromSize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, isp_user.o(i.GetApromSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetApromSize
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read_User
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>GetDataFlashInfo</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, isp_user.o(i.GetDataFlashInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetDataFlashInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read_User
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>ParseCmd</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, isp_user.o(i.ParseCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ParseCmd &rArr; UpdateConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAP
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase_User
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>ReadData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fmc_user.o(i.ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read_User
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[53]"></a>SYS_Init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(i.SYS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, system_nuc230_240.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc230_240.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>UpdateConfig</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, isp_user.o(i.UpdateConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UpdateConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write_User
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read_User
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase_User
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[50]"></a>WriteData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fmc_user.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write_User
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[64]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[65]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[66]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = main &rArr; CAN_SendData &rArr; CAN_Transmit &rArr; CAN_SetTxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFlashInfo
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetApromSize
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsgObj
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RecvData
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Open
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[24]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Checksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, isp_user.o(i.Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[3a]"></a>CLK_SysTickDelay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, can_transfer.o(i.CLK_SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RecvData
</UL>

<P><STRONG><a name="[44]"></a>GetFreeIF</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can.o(i.GetFreeIF))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxMsg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsgObj
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
